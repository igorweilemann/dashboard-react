{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/weilemann/code/react/dashboard-react/app/seed/clean/route.ts"],"sourcesContent":["import { db } from '@vercel/postgres';\n\nconst client = await db.connect();\n\nasync function cleanUpDatabase() {\n  try {\n    await client.sql`BEGIN`;\n\n    // Remove duplicate users, keeping the earliest ID\n    await client.sql`\n      DELETE FROM users\n      WHERE id NOT IN (\n          SELECT MIN(id) FROM users GROUP BY email\n      );\n    `;\n\n    // Remove duplicate customers, keeping the earliest ID\n    await client.sql`\n      DELETE FROM customers\n      WHERE id NOT IN (\n          SELECT MIN(id) FROM customers GROUP BY email\n      );\n    `;\n\n    // Remove duplicate invoices, keeping the earliest ID for each customer\n    await client.sql`\n      DELETE FROM invoices\n      WHERE id NOT IN (\n          SELECT MIN(id) FROM invoices GROUP BY customer_id, amount, status, date\n      );\n    `;\n\n    // Remove duplicate revenue entries, keeping the earliest entry for each month\n    await client.sql`\n      DELETE FROM revenue\n      WHERE ctid NOT IN (\n          SELECT MIN(ctid) FROM revenue GROUP BY month\n      );\n    `;\n\n    await client.sql`COMMIT`;\n    console.log('Database cleanup successful.');\n    return { message: 'Database cleanup successful' };\n  } catch (error) {\n    await client.sql`ROLLBACK`;\n    console.error('Database cleanup failed:', error);\n    return { error: 'Database cleanup failed' };\n  }\n}\n\n// Run the cleanup function when this file is executed\ncleanUpDatabase().then((result) => console.log(result));"],"names":[],"mappings":";AAAA;AAAA;;AAEA,MAAM,SAAS,MAAM,yRAAA,CAAA,KAAE,CAAC,OAAO;AAE/B,eAAe;IACb,IAAI;QACF,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC;QAEvB,kDAAkD;QAClD,MAAM,OAAO,GAAG,CAAC;;;;;IAKjB,CAAC;QAED,sDAAsD;QACtD,MAAM,OAAO,GAAG,CAAC;;;;;IAKjB,CAAC;QAED,uEAAuE;QACvE,MAAM,OAAO,GAAG,CAAC;;;;;IAKjB,CAAC;QAED,8EAA8E;QAC9E,MAAM,OAAO,GAAG,CAAC;;;;;IAKjB,CAAC;QAED,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC;QACxB,QAAQ,GAAG,CAAC;QACZ,OAAO;YAAE,SAAS;QAA8B;IAClD,EAAE,OAAO,OAAO;QACd,MAAM,OAAO,GAAG,CAAC,QAAQ,CAAC;QAC1B,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;YAAE,OAAO;QAA0B;IAC5C;AACF;AAEA,sDAAsD;AACtD,kBAAkB,IAAI,CAAC,CAAC,SAAW,QAAQ,GAAG,CAAC"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/weilemann/code/react/dashboard-react/node_modules/.pnpm/next%4015.1.6_react-dom%4019.0.0_react%4019.0.0__react%4019.0.0/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,6UAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,4SAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,mTAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}